plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'application'
}

group = 'info.workeron9.slime'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    maven {
        url 'https://maven.aliyun.com/repository/public/'
    }
    maven {
        url 'https://maven.aliyun.com/repository/spring/'
    }
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.mockito:mockito-core:5.14.2'
}

application {
    mainClass = 'info.workeron9.slime.slime_springboot.SlimeIsEatingDatasApplication'
}

bootJar {
    version = ''
}

def activeProfiles = project.findProperty('profiles') ?: 'dev'
processResources {
    filesMatching("application.properties") {
        expand(project.properties)
        filter { line ->
            line.replaceAll('spring.profiles.active=.*', "spring.profiles.active=${activeProfiles}")
        }
    }
    // 只保留激活的profile文件
    exclude { details ->
        details.file.name.startsWith("application-") &&
        !details.file.name.endsWith("${activeProfiles}.properties")
    }
    // 排除默认配置文件
    exclude {details -> details.file.name == "application.properties"}
    // 用对应环境的配置代为默认配置文件
    filesMatching("application-${activeProfiles}.properties") {
        name = "application.properties"
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
